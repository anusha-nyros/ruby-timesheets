require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TimeRecordsController do
  before(:each) do
    @organization = Factory(:organization)
    @user = Factory(:user, organization: @organization)
    login_user(@user)
    @pay_period = Factory(:pay_period, organization: @organization)
    @time_record = Factory(:time_record, user: @user, pay_period: @pay_period)
  end

  # This should return the minimal set of attributes required to create a valid
  # TimeRecord. As you add validations to TimeRecord, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    hash = @time_record.attributes.reject {|k,v| %w{id user_id pay_period_id created_at updated_at}.include?(k)}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TimeRecordsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all time_records that associated with user as @time_records" do
      pay_period = Factory(:pay_period)
      get :index, {}
      assigns(:pay_periods).include?(pay_period).should be_false
      assigns(:pay_periods).should eq([@time_record.pay_period])
    end
  end

  describe "GET show" do
    describe "with pay period associated with user" do
      it "assigns the requested time_record as @time_record" do        
        get :show, {:id => @pay_period.to_param}
        assigns(:pay_period).should eq(@pay_period)
        assigns(:time_records).should eq([@time_record])
      end      
    end
    
    describe "with pay_period not associated with user" do
      it "should not assign pay_period" do
        pay_period = Factory(:pay_period)
        user_else = Factory(:user)
        time_record = Factory(:time_record, user: user_else)
        lambda { get :show, {:id => pay_period.to_param} }.should raise_error
        assigns(:pay_period).should be_nil
        assigns(:time_records).should be_nil
      end
    end
  end

  describe "GET new" do
    describe "with pay_period associated with current user" do
      it "assigns a new time_record as @time_record" do
        get :new, {pay_period: @pay_period}
        assigns(:time_record).should be_a_new(TimeRecord)
      end      
    end
    
    describe "with pay_period not associaten with current user" do
      it "should raise an error" do
        pay_period = Factory(:pay_period)
        lambda { get :new, {pay_period: pay_period} }.should raise_error        
      end
    end
  end

  describe "GET edit" do
    describe "with time_record associated with the user" do
      it "assigns the requested time_record as @time_record" do
        get :edit, {:id => @time_record.to_param}
        assigns(:time_record).should eq(@time_record)
      end      
    end
    
    describe "with time_record not associated with the user" do
      it "should raise an error" do
        time_record = Factory(:time_record)
        lambda { get :edit, {:id => time_record.to_param} }.should raise_error
        assigns(:time_record).should be_nil        
      end
    end
  end

  describe "POST create" do
    describe "with pay_period not associated with the user" do
       it "should raise an error" do
         pay_period = Factory(:pay_period)
         lambda { post :create, {:time_record => valid_attributes, pay_period: pay_period} }.should raise_error
       end
     end
     
    describe "with valid params" do      
      describe "with pay_period associated with the user" do
        it "creates a new TimeRecord" do
          expect {
            post :create, { :time_record => valid_attributes , pay_period: @time_record.pay_period }
          }.to change(TimeRecord, :count).by(1)
        end

        it "assigns a newly created time_record as @time_record" do
          post :create, {:time_record => valid_attributes, pay_period: @time_record.pay_period}
          assigns(:time_record).should be_a(TimeRecord)
          assigns(:time_record).should be_persisted
        end

        it "redirects to the created time_record" do
          post :create, {:time_record => valid_attributes, pay_period: @time_record.pay_period}
          response.should redirect_to(time_record_path(@time_record.pay_period))
        end
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved time_record as @time_record" do
        # Trigger the behavior that occurs when invalid params are submitted
        TimeRecord.any_instance.stub(:save).and_return(false)
        post :create, {:time_record => {}, pay_period: @time_record.pay_period}, valid_session
        assigns(:time_record).should be_a_new(TimeRecord)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TimeRecord.any_instance.stub(:save).and_return(false)
        post :create, {:time_record => {}, pay_period: @time_record.pay_period}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with time_record not associated with the user" do
      it "should raise an error" do
        time_record = Factory(:time_record)
        expect { put :update, {:id => time_record.to_param, :time_record => {'description' => 'hello'}} }.to raise_error
      end
    end
    
    describe "with valid params" do
      it "updates the requested time_record" do
        # Assuming there are no other time_records in the database, this
        # specifies that the TimeRecord created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        TimeRecord.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => @time_record.to_param, :time_record => {'these' => 'params'}}
      end

      it "assigns the requested time_record as @time_record" do
        put :update, {:id => @time_record.to_param, :time_record => valid_attributes}, valid_session
        assigns(:time_record).should eq(@time_record)
      end

      it "redirects to the time_record" do
        put :update, {:id => @time_record.to_param, :time_record => valid_attributes}, valid_session
        response.should redirect_to(time_record_path(@time_record.pay_period))
      end
    end

    describe "with invalid params" do
      it "assigns the time_record as @time_record" do
        # Trigger the behavior that occurs when invalid params are submitted
        TimeRecord.any_instance.stub(:save).and_return(false)
        put :update, {:id => @time_record.to_param, :time_record => {}}
        assigns(:time_record).should eq(@time_record)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TimeRecord.any_instance.stub(:save).and_return(false)
        put :update, {:id => @time_record.to_param, :time_record => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    describe "with time_record not associated with user" do
      it "should raise error" do
        time_record = Factory(:time_record)
        expect {
          delete :destroy, {:id => time_record.to_param}
        }.to raise_error
      end
    end
    
    describe "with time_record associated with user" do
      it "destroys the requested time_record" do
        expect {
          delete :destroy, {:id => @time_record.to_param}
        }.to change(TimeRecord, :count).by(-1)
      end

      it "redirects to the time_records list" do
        delete :destroy, {:id => @time_record.to_param}
        response.should redirect_to(time_record_path(@time_record.pay_period))
      end      
    end
  end

end
